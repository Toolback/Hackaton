/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  InitDiamond,
  InitDiamondInterface,
} from "../../proofOfLess/InitDiamond";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "address",
            name: "treasuryAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "oracleAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "adminAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "mainToken",
            type: "address",
          },
        ],
        internalType: "struct InitDiamond.Args",
        name: "_args",
        type: "tuple",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610655806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633a6b696814610030575b600080fd5b61004361003e366004610499565b610045565b005b6040518060600160405280602781526020016105f960279139805161007291602c91602090910190610318565b50601d8054732791bca1f2de4661ed88a30c99a7a9449aa841746001600160a01b03199182161790915560a0820180516001600160a01b039081166000908152601c60209081526040909120805460ff191660011790559151601e8054909416911617909155815180516100ea926002920190610318565b506020808201518051610101926003920190610318565b5060808101516001600160a01b039081166000908152602b60209081526040808320805460ff19908116600190811790925560608701805187168652838620805490921683179091558287015185549087166001600160a01b03199182161790955551815495169490931693909317909155815180830183526012815271141c9bdbd993d993195cdcd11a585b5bdb9960721b8183015282518084019093526002835261563160f01b918301919091526101ba9161029c565b600455507fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f8054600160ff1991821681179092557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369580548216831790556307f5828d60e41b6000527f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c380549091169091179055565b60006040518060800160405280604f81526020016105aa604f913980519060200120838051906020012083805190602001206102d54690565b604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905092915050565b8280546103249061056e565b90600052602060002090601f016020900481019282610346576000855561038c565b82601f1061035f57805160ff191683800117855561038c565b8280016001018555821561038c579182015b8281111561038c578251825591602001919060010190610371565b5061039892915061039c565b5090565b5b80821115610398576000815560010161039d565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156103ea576103ea6103b1565b60405290565b600082601f83011261040157600080fd5b813567ffffffffffffffff8082111561041c5761041c6103b1565b604051601f8301601f19908116603f01168101908282118183101715610444576104446103b1565b8160405283815286602085880101111561045d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b038116811461049457600080fd5b919050565b6000602082840312156104ab57600080fd5b813567ffffffffffffffff808211156104c357600080fd5b9083019060c082860312156104d757600080fd5b6104df6103c7565b8235828111156104ee57600080fd5b6104fa878286016103f0565b82525060208301358281111561050f57600080fd5b61051b878286016103f0565b60208301525061052d6040840161047d565b604082015261053e6060840161047d565b606082015261054f6080840161047d565b608082015261056060a0840161047d565b60a082015295945050505050565b600181811c9082168061058257607f821691505b602082108114156105a357634e487b7160e01b600052602260045260246000fd5b5091905056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e743235362073616c742c6164647265737320766572696679696e67436f6e74726163742968747470733a2f2f70726f6f664f664c6573732e636f6d2f6d657461646174612f6974656d732fa264697066735822122027579a50f03e77a28a6ce11e0a6f80898db023ac9885d435f96963d62ea5e3c764736f6c634300080b0033";

type InitDiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InitDiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InitDiamond__factory extends ContractFactory {
  constructor(...args: InitDiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<InitDiamond> {
    return super.deploy(overrides || {}) as Promise<InitDiamond>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): InitDiamond {
    return super.attach(address) as InitDiamond;
  }
  override connect(signer: Signer): InitDiamond__factory {
    return super.connect(signer) as InitDiamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InitDiamondInterface {
    return new utils.Interface(_abi) as InitDiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InitDiamond {
    return new Contract(address, _abi, signerOrProvider) as InitDiamond;
  }
}
