/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type QuestDataDetailedStruct = {
  questName: PromiseOrValue<string>;
  questId: PromiseOrValue<BigNumberish>;
  author: PromiseOrValue<string>;
  questEntryToken: PromiseOrValue<string>;
  questEntryCost: PromiseOrValue<BigNumberish>;
  lessReward: PromiseOrValue<BigNumberish>;
  fees: PromiseOrValue<BigNumberish>;
  startPeriod: PromiseOrValue<BigNumberish>;
  endPeriod: PromiseOrValue<BigNumberish>;
  delayPeriod: PromiseOrValue<BigNumberish>;
  questBalance: PromiseOrValue<BigNumberish>;
  waitingListAddress: PromiseOrValue<string>[];
  newlySubscribedPlayer: PromiseOrValue<string>[];
  participants: PromiseOrValue<string>[];
  isActive: PromiseOrValue<boolean>;
};

export type QuestDataDetailedStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  string[],
  string[],
  boolean
] & {
  questName: string;
  questId: BigNumber;
  author: string;
  questEntryToken: string;
  questEntryCost: BigNumber;
  lessReward: BigNumber;
  fees: BigNumber;
  startPeriod: BigNumber;
  endPeriod: BigNumber;
  delayPeriod: BigNumber;
  questBalance: BigNumber;
  waitingListAddress: string[];
  newlySubscribedPlayer: string[];
  participants: string[];
  isActive: boolean;
};

export type UserQuestDataStruct = {
  userName: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  totalFunding: PromiseOrValue<BigNumberish>;
  totalGain: PromiseOrValue<BigNumberish>;
  goal: PromiseOrValue<BigNumberish>;
  hasWinThisCycle: PromiseOrValue<boolean>;
};

export type UserQuestDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  userName: string;
  tokenId: BigNumber;
  totalFunding: BigNumber;
  totalGain: BigNumber;
  goal: BigNumber;
  hasWinThisCycle: boolean;
};

export interface QuestsRegistryFacetInterface extends utils.Interface {
  functions: {
    "DisableActiveQuest(uint256)": FunctionFragment;
    "GetAllActiveQuests()": FunctionFragment;
    "GetQuestBalance(uint256,address)": FunctionFragment;
    "GetQuestData(uint256)": FunctionFragment;
    "GetTotalListedQuestCount()": FunctionFragment;
    "GetUserLockedFundsByQuest(uint256,address,address)": FunctionFragment;
    "GetUserQuestData(uint256,address)": FunctionFragment;
    "GetUserTotalFundingByQuest(uint256,address,address)": FunctionFragment;
    "GetUserTotalGainByQuest(uint256,address,address)": FunctionFragment;
    "SetDelayPeriod(uint256,uint256)": FunctionFragment;
    "SetQuestEntryCost(uint256,uint256)": FunctionFragment;
    "SetQuestEntryToken(uint256,address)": FunctionFragment;
    "SetQuestFees(uint256,uint256)": FunctionFragment;
    "SetUserQuestTokenId(uint256,uint256,address)": FunctionFragment;
    "SetUserQuestUserName(uint256,string,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DisableActiveQuest"
      | "GetAllActiveQuests"
      | "GetQuestBalance"
      | "GetQuestData"
      | "GetTotalListedQuestCount"
      | "GetUserLockedFundsByQuest"
      | "GetUserQuestData"
      | "GetUserTotalFundingByQuest"
      | "GetUserTotalGainByQuest"
      | "SetDelayPeriod"
      | "SetQuestEntryCost"
      | "SetQuestEntryToken"
      | "SetQuestFees"
      | "SetUserQuestTokenId"
      | "SetUserQuestUserName"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DisableActiveQuest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetAllActiveQuests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetQuestBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetQuestData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetTotalListedQuestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserLockedFundsByQuest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserQuestData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserTotalFundingByQuest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUserTotalGainByQuest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "SetDelayPeriod",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetQuestEntryCost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetQuestEntryToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetQuestFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetUserQuestTokenId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "SetUserQuestUserName",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DisableActiveQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetAllActiveQuests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetQuestBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetQuestData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetTotalListedQuestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUserLockedFundsByQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUserQuestData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUserTotalFundingByQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUserTotalGainByQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetDelayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetQuestEntryCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetQuestEntryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetQuestFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetUserQuestTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetUserQuestUserName",
    data: BytesLike
  ): Result;

  events: {};
}

export interface QuestsRegistryFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuestsRegistryFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DisableActiveQuest(
      _activeQuestIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    GetAllActiveQuests(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { activeQuests_: BigNumber[] }>;

    GetQuestBalance(
      _questId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    GetQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [QuestDataDetailedStructOutput] & {
        questData_: QuestDataDetailedStructOutput;
      }
    >;

    GetTotalListedQuestCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalQuestCounter_: BigNumber }>;

    GetUserLockedFundsByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    GetUserQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [UserQuestDataStructOutput] & { data_: UserQuestDataStructOutput }
    >;

    GetUserTotalFundingByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    GetUserTotalGainByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    SetDelayPeriod(
      _questId: PromiseOrValue<BigNumberish>,
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetQuestEntryCost(
      _questId: PromiseOrValue<BigNumberish>,
      _newEntryCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetQuestEntryToken(
      _questId: PromiseOrValue<BigNumberish>,
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetQuestFees(
      _questId: PromiseOrValue<BigNumberish>,
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetUserQuestTokenId(
      _questId: PromiseOrValue<BigNumberish>,
      _userTokenId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetUserQuestUserName(
      _questId: PromiseOrValue<BigNumberish>,
      _newQuestHandle: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DisableActiveQuest(
    _activeQuestIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  GetAllActiveQuests(overrides?: CallOverrides): Promise<BigNumber[]>;

  GetQuestBalance(
    _questId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GetQuestData(
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<QuestDataDetailedStructOutput>;

  GetTotalListedQuestCount(overrides?: CallOverrides): Promise<BigNumber>;

  GetUserLockedFundsByQuest(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GetUserQuestData(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UserQuestDataStructOutput>;

  GetUserTotalFundingByQuest(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GetUserTotalGainByQuest(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  SetDelayPeriod(
    _questId: PromiseOrValue<BigNumberish>,
    _newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetQuestEntryCost(
    _questId: PromiseOrValue<BigNumberish>,
    _newEntryCost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetQuestEntryToken(
    _questId: PromiseOrValue<BigNumberish>,
    _newToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetQuestFees(
    _questId: PromiseOrValue<BigNumberish>,
    _newFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetUserQuestTokenId(
    _questId: PromiseOrValue<BigNumberish>,
    _userTokenId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetUserQuestUserName(
    _questId: PromiseOrValue<BigNumberish>,
    _newQuestHandle: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DisableActiveQuest(
      _activeQuestIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    GetAllActiveQuests(overrides?: CallOverrides): Promise<BigNumber[]>;

    GetQuestBalance(
      _questId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<QuestDataDetailedStructOutput>;

    GetTotalListedQuestCount(overrides?: CallOverrides): Promise<BigNumber>;

    GetUserLockedFundsByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UserQuestDataStructOutput>;

    GetUserTotalFundingByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserTotalGainByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SetDelayPeriod(
      _questId: PromiseOrValue<BigNumberish>,
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SetQuestEntryCost(
      _questId: PromiseOrValue<BigNumberish>,
      _newEntryCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SetQuestEntryToken(
      _questId: PromiseOrValue<BigNumberish>,
      _newToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    SetQuestFees(
      _questId: PromiseOrValue<BigNumberish>,
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SetUserQuestTokenId(
      _questId: PromiseOrValue<BigNumberish>,
      _userTokenId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    SetUserQuestUserName(
      _questId: PromiseOrValue<BigNumberish>,
      _newQuestHandle: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DisableActiveQuest(
      _activeQuestIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    GetAllActiveQuests(overrides?: CallOverrides): Promise<BigNumber>;

    GetQuestBalance(
      _questId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetTotalListedQuestCount(overrides?: CallOverrides): Promise<BigNumber>;

    GetUserLockedFundsByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserTotalFundingByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetUserTotalGainByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SetDelayPeriod(
      _questId: PromiseOrValue<BigNumberish>,
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetQuestEntryCost(
      _questId: PromiseOrValue<BigNumberish>,
      _newEntryCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetQuestEntryToken(
      _questId: PromiseOrValue<BigNumberish>,
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetQuestFees(
      _questId: PromiseOrValue<BigNumberish>,
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetUserQuestTokenId(
      _questId: PromiseOrValue<BigNumberish>,
      _userTokenId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetUserQuestUserName(
      _questId: PromiseOrValue<BigNumberish>,
      _newQuestHandle: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DisableActiveQuest(
      _activeQuestIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    GetAllActiveQuests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetQuestBalance(
      _questId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetTotalListedQuestCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserLockedFundsByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserTotalFundingByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetUserTotalGainByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SetDelayPeriod(
      _questId: PromiseOrValue<BigNumberish>,
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetQuestEntryCost(
      _questId: PromiseOrValue<BigNumberish>,
      _newEntryCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetQuestEntryToken(
      _questId: PromiseOrValue<BigNumberish>,
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetQuestFees(
      _questId: PromiseOrValue<BigNumberish>,
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetUserQuestTokenId(
      _questId: PromiseOrValue<BigNumberish>,
      _userTokenId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetUserQuestUserName(
      _questId: PromiseOrValue<BigNumberish>,
      _newQuestHandle: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
