/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type QuestDataDetailedStruct = {
  questName: PromiseOrValue<string>;
  questSubtitle: PromiseOrValue<string>;
  questDetails: PromiseOrValue<string>;
  questRules: PromiseOrValue<string>;
  questType: PromiseOrValue<string>;
  startPeriod: PromiseOrValue<BigNumberish>;
  endPeriod: PromiseOrValue<BigNumberish>;
  questId: PromiseOrValue<BigNumberish>;
  author: PromiseOrValue<string>;
  questEntryToken: PromiseOrValue<string>;
  questEntryCost: PromiseOrValue<BigNumberish>;
  lessReward: PromiseOrValue<BigNumberish>;
  fees: PromiseOrValue<BigNumberish>;
  delayPeriod: PromiseOrValue<BigNumberish>;
  questBalance: PromiseOrValue<BigNumberish>;
  waitingListAddress: PromiseOrValue<string>[];
  newlySubscribedPlayer: PromiseOrValue<string>[];
  participants: PromiseOrValue<string>[];
  isActive: PromiseOrValue<boolean>;
};

export type QuestDataDetailedStructOutput = [
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  string[],
  string[],
  boolean
] & {
  questName: string;
  questSubtitle: string;
  questDetails: string;
  questRules: string;
  questType: string;
  startPeriod: BigNumber;
  endPeriod: BigNumber;
  questId: BigNumber;
  author: string;
  questEntryToken: string;
  questEntryCost: BigNumber;
  lessReward: BigNumber;
  fees: BigNumber;
  delayPeriod: BigNumber;
  questBalance: BigNumber;
  waitingListAddress: string[];
  newlySubscribedPlayer: string[];
  participants: string[];
  isActive: boolean;
};

export type UserQuestDataStruct = {
  userName: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  totalFunding: PromiseOrValue<BigNumberish>;
  userLockedFunds: PromiseOrValue<BigNumberish>;
  totalGain: PromiseOrValue<BigNumberish>;
  goal: PromiseOrValue<BigNumberish>;
  hasWinThisCycle: PromiseOrValue<boolean>;
};

export type UserQuestDataStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  userName: string;
  tokenId: BigNumber;
  totalFunding: BigNumber;
  userLockedFunds: BigNumber;
  totalGain: BigNumber;
  goal: BigNumber;
  hasWinThisCycle: boolean;
};

export interface QuestFacetInterface extends utils.Interface {
  functions: {
    "deleteNewlySubscribed(uint256)": FunctionFragment;
    "getQuestBalance(uint256,address)": FunctionFragment;
    "getQuestData(uint256)": FunctionFragment;
    "getUserQuestData(uint256,address)": FunctionFragment;
    "getUserTotalFundingByQuest(uint256,address,address)": FunctionFragment;
    "getUserTotalGainByQuest(uint256,address,address)": FunctionFragment;
    "isUserInQuest(uint256,address)": FunctionFragment;
    "isUserInWaitingList(uint256,address)": FunctionFragment;
    "newCycle(uint256)": FunctionFragment;
    "registerWaitingListToQuest(uint256)": FunctionFragment;
    "setDelayPeriod(uint256,uint256)": FunctionFragment;
    "setQuestDetails(uint256,string)": FunctionFragment;
    "setQuestEntryCost(uint256,uint256)": FunctionFragment;
    "setQuestEntryToken(uint256,address)": FunctionFragment;
    "setQuestFees(uint256,uint256)": FunctionFragment;
    "setQuestOwner(uint256,address)": FunctionFragment;
    "setQuestRules(uint256,string)": FunctionFragment;
    "setQuestSubtitle(uint256,string)": FunctionFragment;
    "setQuestType(uint256,string)": FunctionFragment;
    "setUserQuestTokenId(uint256,uint256,address)": FunctionFragment;
    "setUserQuestUserName(uint256,string,address)": FunctionFragment;
    "subscribeToWaitingList(uint256)": FunctionFragment;
    "unsubscribeFromWaitingList(uint256,address,uint256)": FunctionFragment;
    "updateUserQuestStatus(uint256,address[])": FunctionFragment;
    "updateUsersGoals(uint256,address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deleteNewlySubscribed"
      | "getQuestBalance"
      | "getQuestData"
      | "getUserQuestData"
      | "getUserTotalFundingByQuest"
      | "getUserTotalGainByQuest"
      | "isUserInQuest"
      | "isUserInWaitingList"
      | "newCycle"
      | "registerWaitingListToQuest"
      | "setDelayPeriod"
      | "setQuestDetails"
      | "setQuestEntryCost"
      | "setQuestEntryToken"
      | "setQuestFees"
      | "setQuestOwner"
      | "setQuestRules"
      | "setQuestSubtitle"
      | "setQuestType"
      | "setUserQuestTokenId"
      | "setUserQuestUserName"
      | "subscribeToWaitingList"
      | "unsubscribeFromWaitingList"
      | "updateUserQuestStatus"
      | "updateUsersGoals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deleteNewlySubscribed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestBalance",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserQuestData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalFundingByQuest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalGainByQuest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserInQuest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserInWaitingList",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newCycle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWaitingListToQuest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayPeriod",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestDetails",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestEntryCost",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestEntryToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestOwner",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestRules",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestSubtitle",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestType",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserQuestTokenId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserQuestUserName",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToWaitingList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeFromWaitingList",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserQuestStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUsersGoals",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteNewlySubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserQuestData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalFundingByQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalGainByQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserInQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserInWaitingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newCycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerWaitingListToQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestEntryCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestEntryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestSubtitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuestType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserQuestTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserQuestUserName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToWaitingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeFromWaitingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserQuestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUsersGoals",
    data: BytesLike
  ): Result;

  events: {};
}

export interface QuestFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuestFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deleteNewlySubscribed(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getQuestBalance(
      _questId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    getQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [QuestDataDetailedStructOutput] & {
        questData_: QuestDataDetailedStructOutput;
      }
    >;

    getUserQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [UserQuestDataStructOutput] & { data_: UserQuestDataStructOutput }
    >;

    getUserTotalFundingByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    getUserTotalGainByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    isUserInQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { statuts_: boolean }>;

    isUserInWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { statuts_: boolean }>;

    newCycle(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerWaitingListToQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelayPeriod(
      _questId: PromiseOrValue<BigNumberish>,
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuestDetails(
      _questId: PromiseOrValue<BigNumberish>,
      _newDetails: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuestEntryCost(
      _questId: PromiseOrValue<BigNumberish>,
      _newEntryCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuestEntryToken(
      _questId: PromiseOrValue<BigNumberish>,
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuestFees(
      _questId: PromiseOrValue<BigNumberish>,
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuestOwner(
      _questId: PromiseOrValue<BigNumberish>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuestRules(
      _questId: PromiseOrValue<BigNumberish>,
      _newRules: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuestSubtitle(
      _questId: PromiseOrValue<BigNumberish>,
      _newSubtitle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuestType(
      _questId: PromiseOrValue<BigNumberish>,
      _newType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUserQuestTokenId(
      _questId: PromiseOrValue<BigNumberish>,
      _userTokenId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUserQuestUserName(
      _questId: PromiseOrValue<BigNumberish>,
      _newQuestHandle: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeToWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsubscribeFromWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      _memberToUnsubscribe: PromiseOrValue<string>,
      _userWaitingListIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUserQuestStatus(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUsersGoals(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deleteNewlySubscribed(
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getQuestBalance(
    _questId: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuestData(
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<QuestDataDetailedStructOutput>;

  getUserQuestData(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UserQuestDataStructOutput>;

  getUserTotalFundingByQuest(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTotalGainByQuest(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isUserInQuest(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserInWaitingList(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newCycle(
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerWaitingListToQuest(
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelayPeriod(
    _questId: PromiseOrValue<BigNumberish>,
    _newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuestDetails(
    _questId: PromiseOrValue<BigNumberish>,
    _newDetails: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuestEntryCost(
    _questId: PromiseOrValue<BigNumberish>,
    _newEntryCost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuestEntryToken(
    _questId: PromiseOrValue<BigNumberish>,
    _newToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuestFees(
    _questId: PromiseOrValue<BigNumberish>,
    _newFees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuestOwner(
    _questId: PromiseOrValue<BigNumberish>,
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuestRules(
    _questId: PromiseOrValue<BigNumberish>,
    _newRules: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuestSubtitle(
    _questId: PromiseOrValue<BigNumberish>,
    _newSubtitle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuestType(
    _questId: PromiseOrValue<BigNumberish>,
    _newType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUserQuestTokenId(
    _questId: PromiseOrValue<BigNumberish>,
    _userTokenId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUserQuestUserName(
    _questId: PromiseOrValue<BigNumberish>,
    _newQuestHandle: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeToWaitingList(
    _questId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsubscribeFromWaitingList(
    _questId: PromiseOrValue<BigNumberish>,
    _memberToUnsubscribe: PromiseOrValue<string>,
    _userWaitingListIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUserQuestStatus(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUsersGoals(
    _questId: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>[],
    _amount: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deleteNewlySubscribed(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getQuestBalance(
      _questId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<QuestDataDetailedStructOutput>;

    getUserQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UserQuestDataStructOutput>;

    getUserTotalFundingByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalGainByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserInQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserInWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newCycle(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerWaitingListToQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelayPeriod(
      _questId: PromiseOrValue<BigNumberish>,
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setQuestDetails(
      _questId: PromiseOrValue<BigNumberish>,
      _newDetails: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setQuestEntryCost(
      _questId: PromiseOrValue<BigNumberish>,
      _newEntryCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setQuestEntryToken(
      _questId: PromiseOrValue<BigNumberish>,
      _newToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setQuestFees(
      _questId: PromiseOrValue<BigNumberish>,
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setQuestOwner(
      _questId: PromiseOrValue<BigNumberish>,
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setQuestRules(
      _questId: PromiseOrValue<BigNumberish>,
      _newRules: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setQuestSubtitle(
      _questId: PromiseOrValue<BigNumberish>,
      _newSubtitle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setQuestType(
      _questId: PromiseOrValue<BigNumberish>,
      _newType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setUserQuestTokenId(
      _questId: PromiseOrValue<BigNumberish>,
      _userTokenId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserQuestUserName(
      _questId: PromiseOrValue<BigNumberish>,
      _newQuestHandle: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeToWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unsubscribeFromWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      _memberToUnsubscribe: PromiseOrValue<string>,
      _userWaitingListIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateUserQuestStatus(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateUsersGoals(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deleteNewlySubscribed(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getQuestBalance(
      _questId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalFundingByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTotalGainByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserInQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserInWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newCycle(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerWaitingListToQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelayPeriod(
      _questId: PromiseOrValue<BigNumberish>,
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuestDetails(
      _questId: PromiseOrValue<BigNumberish>,
      _newDetails: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuestEntryCost(
      _questId: PromiseOrValue<BigNumberish>,
      _newEntryCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuestEntryToken(
      _questId: PromiseOrValue<BigNumberish>,
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuestFees(
      _questId: PromiseOrValue<BigNumberish>,
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuestOwner(
      _questId: PromiseOrValue<BigNumberish>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuestRules(
      _questId: PromiseOrValue<BigNumberish>,
      _newRules: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuestSubtitle(
      _questId: PromiseOrValue<BigNumberish>,
      _newSubtitle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuestType(
      _questId: PromiseOrValue<BigNumberish>,
      _newType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUserQuestTokenId(
      _questId: PromiseOrValue<BigNumberish>,
      _userTokenId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUserQuestUserName(
      _questId: PromiseOrValue<BigNumberish>,
      _newQuestHandle: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeToWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsubscribeFromWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      _memberToUnsubscribe: PromiseOrValue<string>,
      _userWaitingListIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUserQuestStatus(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUsersGoals(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deleteNewlySubscribed(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getQuestBalance(
      _questId: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserQuestData(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalFundingByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalGainByQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserInQuest(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserInWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newCycle(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerWaitingListToQuest(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelayPeriod(
      _questId: PromiseOrValue<BigNumberish>,
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuestDetails(
      _questId: PromiseOrValue<BigNumberish>,
      _newDetails: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuestEntryCost(
      _questId: PromiseOrValue<BigNumberish>,
      _newEntryCost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuestEntryToken(
      _questId: PromiseOrValue<BigNumberish>,
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuestFees(
      _questId: PromiseOrValue<BigNumberish>,
      _newFees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuestOwner(
      _questId: PromiseOrValue<BigNumberish>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuestRules(
      _questId: PromiseOrValue<BigNumberish>,
      _newRules: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuestSubtitle(
      _questId: PromiseOrValue<BigNumberish>,
      _newSubtitle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuestType(
      _questId: PromiseOrValue<BigNumberish>,
      _newType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUserQuestTokenId(
      _questId: PromiseOrValue<BigNumberish>,
      _userTokenId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUserQuestUserName(
      _questId: PromiseOrValue<BigNumberish>,
      _newQuestHandle: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeToWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsubscribeFromWaitingList(
      _questId: PromiseOrValue<BigNumberish>,
      _memberToUnsubscribe: PromiseOrValue<string>,
      _userWaitingListIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUserQuestStatus(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUsersGoals(
      _questId: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
