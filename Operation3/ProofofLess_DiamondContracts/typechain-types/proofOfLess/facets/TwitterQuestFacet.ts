/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TwitterQuestFacetInterface extends utils.Interface {
  functions: {
    "NewCycle()": FunctionFragment;
    "RegisterWaitingListToQuest()": FunctionFragment;
    "SubscribeToWaitingList()": FunctionFragment;
    "UnsubscribeFromWaitingList(address,uint256)": FunctionFragment;
    "UpdateUserQuestStatus(address[],bool[])": FunctionFragment;
    "UpdateUsersGoals(address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NewCycle"
      | "RegisterWaitingListToQuest"
      | "SubscribeToWaitingList"
      | "UnsubscribeFromWaitingList"
      | "UpdateUserQuestStatus"
      | "UpdateUsersGoals"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NewCycle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RegisterWaitingListToQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SubscribeToWaitingList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UnsubscribeFromWaitingList",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateUserQuestStatus",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateUsersGoals",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(functionFragment: "NewCycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RegisterWaitingListToQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SubscribeToWaitingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UnsubscribeFromWaitingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpdateUserQuestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpdateUsersGoals",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TwitterQuestFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TwitterQuestFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NewCycle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    RegisterWaitingListToQuest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SubscribeToWaitingList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    UnsubscribeFromWaitingList(
      _memberToUnsubscribe: PromiseOrValue<string>,
      _userWaitingListIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    UpdateUserQuestStatus(
      _user: PromiseOrValue<string>[],
      _hasWin: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    UpdateUsersGoals(
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NewCycle(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  RegisterWaitingListToQuest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SubscribeToWaitingList(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  UnsubscribeFromWaitingList(
    _memberToUnsubscribe: PromiseOrValue<string>,
    _userWaitingListIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  UpdateUserQuestStatus(
    _user: PromiseOrValue<string>[],
    _hasWin: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  UpdateUsersGoals(
    _user: PromiseOrValue<string>[],
    _amount: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NewCycle(overrides?: CallOverrides): Promise<void>;

    RegisterWaitingListToQuest(overrides?: CallOverrides): Promise<void>;

    SubscribeToWaitingList(overrides?: CallOverrides): Promise<boolean>;

    UnsubscribeFromWaitingList(
      _memberToUnsubscribe: PromiseOrValue<string>,
      _userWaitingListIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    UpdateUserQuestStatus(
      _user: PromiseOrValue<string>[],
      _hasWin: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    UpdateUsersGoals(
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    NewCycle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    RegisterWaitingListToQuest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SubscribeToWaitingList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    UnsubscribeFromWaitingList(
      _memberToUnsubscribe: PromiseOrValue<string>,
      _userWaitingListIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    UpdateUserQuestStatus(
      _user: PromiseOrValue<string>[],
      _hasWin: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    UpdateUsersGoals(
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NewCycle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    RegisterWaitingListToQuest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SubscribeToWaitingList(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    UnsubscribeFromWaitingList(
      _memberToUnsubscribe: PromiseOrValue<string>,
      _userWaitingListIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    UpdateUserQuestStatus(
      _user: PromiseOrValue<string>[],
      _hasWin: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    UpdateUsersGoals(
      _user: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
