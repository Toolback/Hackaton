/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ItemTypeStruct = {
  name: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  author: PromiseOrValue<string>;
  traitModifiers: PromiseOrValue<BigNumberish>[];
  slotPositions: PromiseOrValue<boolean>[];
  lessPrice: PromiseOrValue<BigNumberish>;
  stablePrice: PromiseOrValue<BigNumberish>;
  maxQuantity: PromiseOrValue<BigNumberish>;
  totalQuantity: PromiseOrValue<BigNumberish>;
  canPurchaseWithLess: PromiseOrValue<boolean>;
  canPurchaseWithCoins: PromiseOrValue<boolean>;
  minLevel: PromiseOrValue<BigNumberish>;
  canBeTransferred: PromiseOrValue<boolean>;
  category: PromiseOrValue<BigNumberish>;
  experienceBonus: PromiseOrValue<BigNumberish>;
};

export type ItemTypeStructOutput = [
  string,
  string,
  string,
  number[],
  boolean[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  number,
  boolean,
  number,
  number
] & {
  name: string;
  description: string;
  author: string;
  traitModifiers: number[];
  slotPositions: boolean[];
  lessPrice: BigNumber;
  stablePrice: BigNumber;
  maxQuantity: BigNumber;
  totalQuantity: BigNumber;
  canPurchaseWithLess: boolean;
  canPurchaseWithCoins: boolean;
  minLevel: number;
  canBeTransferred: boolean;
  category: number;
  experienceBonus: number;
};

export type WearableSetStruct = {
  name: PromiseOrValue<string>;
  wearableIds: PromiseOrValue<BigNumberish>[];
  traitsBonuses: [
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>
  ];
};

export type WearableSetStructOutput = [
  string,
  number[],
  [number, number, number, number, number]
] & {
  name: string;
  wearableIds: number[];
  traitsBonuses: [number, number, number, number, number];
};

export type ItemTypeIOStruct = {
  balance: PromiseOrValue<BigNumberish>;
  itemId: PromiseOrValue<BigNumberish>;
  itemType: ItemTypeStruct;
};

export type ItemTypeIOStructOutput = [
  BigNumber,
  BigNumber,
  ItemTypeStructOutput
] & { balance: BigNumber; itemId: BigNumber; itemType: ItemTypeStructOutput };

export declare namespace ItemsFacet {
  export type ItemIdIOStruct = {
    itemId: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
  };

  export type ItemIdIOStructOutput = [BigNumber, BigNumber] & {
    itemId: BigNumber;
    balance: BigNumber;
  };
}

export interface ItemsFacetInterface extends utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "balanceOfToken(address,uint256,uint256)": FunctionFragment;
    "equipWearables(uint256,uint16[16])": FunctionFragment;
    "equippedWearables(uint256)": FunctionFragment;
    "findWearableSets(uint256[])": FunctionFragment;
    "getItemType(uint256)": FunctionFragment;
    "getItemTypes(uint256[])": FunctionFragment;
    "getWearableSet(uint256)": FunctionFragment;
    "getWearableSets()": FunctionFragment;
    "itemBalances(address)": FunctionFragment;
    "itemBalancesOfToken(address,uint256)": FunctionFragment;
    "itemBalancesOfTokenWithTypes(address,uint256)": FunctionFragment;
    "itemBalancesWithTypes(address)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "totalWearableSets()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "useConsumables(uint256,uint256[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "balanceOfBatch"
      | "balanceOfToken"
      | "equipWearables"
      | "equippedWearables"
      | "findWearableSets"
      | "getItemType"
      | "getItemTypes"
      | "getWearableSet"
      | "getWearableSets"
      | "itemBalances"
      | "itemBalancesOfToken"
      | "itemBalancesOfTokenWithTypes"
      | "itemBalancesWithTypes"
      | "setBaseURI"
      | "totalWearableSets"
      | "uri"
      | "useConsumables"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "equipWearables",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "equippedWearables",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "findWearableSets",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemTypes",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWearableSets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "itemBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemBalancesOfToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemBalancesOfTokenWithTypes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "itemBalancesWithTypes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWearableSets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "useConsumables",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equipWearables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equippedWearables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getItemTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemBalancesOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemBalancesOfTokenWithTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemBalancesWithTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWearableSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useConsumables",
    data: BytesLike
  ): Result;

  events: {
    "EquipWearables(uint256,uint16[16],uint16[16])": EventFragment;
    "TransferToParent(address,uint256,uint256,uint256)": EventFragment;
    "UseConsumables(uint256,uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EquipWearables"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferToParent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UseConsumables"): EventFragment;
}

export interface EquipWearablesEventObject {
  _tokenId: BigNumber;
  _oldWearables: number[];
  _newWearables: number[];
}
export type EquipWearablesEvent = TypedEvent<
  [BigNumber, number[], number[]],
  EquipWearablesEventObject
>;

export type EquipWearablesEventFilter = TypedEventFilter<EquipWearablesEvent>;

export interface TransferToParentEventObject {
  _toContract: string;
  _toTokenId: BigNumber;
  _tokenTypeId: BigNumber;
  _value: BigNumber;
}
export type TransferToParentEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  TransferToParentEventObject
>;

export type TransferToParentEventFilter =
  TypedEventFilter<TransferToParentEvent>;

export interface UseConsumablesEventObject {
  _tokenId: BigNumber;
  _itemIds: BigNumber[];
  _quantities: BigNumber[];
}
export type UseConsumablesEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]],
  UseConsumablesEventObject
>;

export type UseConsumablesEventFilter = TypedEventFilter<UseConsumablesEvent>;

export interface ItemsFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ItemsFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal_: BigNumber }>;

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { bals: BigNumber[] }>;

    balanceOfToken(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    equipWearables(
      _tokenId: PromiseOrValue<BigNumberish>,
      _wearablesToEquip: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    equippedWearables(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { wearableIds_: number[] }>;

    findWearableSets(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { wearableSetIds_: BigNumber[] }>;

    getItemType(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ItemTypeStructOutput] & { itemType_: ItemTypeStructOutput }>;

    getItemTypes(
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [ItemTypeStructOutput[]] & { itemTypes_: ItemTypeStructOutput[] }
    >;

    getWearableSet(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [WearableSetStructOutput] & { wearableSet_: WearableSetStructOutput }
    >;

    getWearableSets(
      overrides?: CallOverrides
    ): Promise<
      [WearableSetStructOutput[]] & { wearableSets_: WearableSetStructOutput[] }
    >;

    itemBalances(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ItemsFacet.ItemIdIOStructOutput[]] & {
        bals_: ItemsFacet.ItemIdIOStructOutput[];
      }
    >;

    itemBalancesOfToken(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ItemsFacet.ItemIdIOStructOutput[]] & {
        bals_: ItemsFacet.ItemIdIOStructOutput[];
      }
    >;

    itemBalancesOfTokenWithTypes(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [ItemTypeIOStructOutput[]] & {
        itemBalancesOfTokenWithTypes_: ItemTypeIOStructOutput[];
      }
    >;

    itemBalancesWithTypes(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ItemTypeIOStructOutput[]] & { output_: ItemTypeIOStructOutput[] }
    >;

    setBaseURI(
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalWearableSets(overrides?: CallOverrides): Promise<[BigNumber]>;

    uri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    useConsumables(
      _tokenId: PromiseOrValue<BigNumberish>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _owner: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    _owners: PromiseOrValue<string>[],
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  balanceOfToken(
    _tokenContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  equipWearables(
    _tokenId: PromiseOrValue<BigNumberish>,
    _wearablesToEquip: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  equippedWearables(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  findWearableSets(
    _wearableIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getItemType(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ItemTypeStructOutput>;

  getItemTypes(
    _itemIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<ItemTypeStructOutput[]>;

  getWearableSet(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<WearableSetStructOutput>;

  getWearableSets(
    overrides?: CallOverrides
  ): Promise<WearableSetStructOutput[]>;

  itemBalances(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ItemsFacet.ItemIdIOStructOutput[]>;

  itemBalancesOfToken(
    _tokenContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ItemsFacet.ItemIdIOStructOutput[]>;

  itemBalancesOfTokenWithTypes(
    _tokenContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ItemTypeIOStructOutput[]>;

  itemBalancesWithTypes(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ItemTypeIOStructOutput[]>;

  setBaseURI(
    _value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

  uri(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  useConsumables(
    _tokenId: PromiseOrValue<BigNumberish>,
    _itemIds: PromiseOrValue<BigNumberish>[],
    _quantities: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    balanceOfToken(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equipWearables(
      _tokenId: PromiseOrValue<BigNumberish>,
      _wearablesToEquip: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    equippedWearables(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    findWearableSets(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getItemType(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ItemTypeStructOutput>;

    getItemTypes(
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<ItemTypeStructOutput[]>;

    getWearableSet(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WearableSetStructOutput>;

    getWearableSets(
      overrides?: CallOverrides
    ): Promise<WearableSetStructOutput[]>;

    itemBalances(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ItemsFacet.ItemIdIOStructOutput[]>;

    itemBalancesOfToken(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ItemsFacet.ItemIdIOStructOutput[]>;

    itemBalancesOfTokenWithTypes(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ItemTypeIOStructOutput[]>;

    itemBalancesWithTypes(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ItemTypeIOStructOutput[]>;

    setBaseURI(
      _value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    uri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    useConsumables(
      _tokenId: PromiseOrValue<BigNumberish>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EquipWearables(uint256,uint16[16],uint16[16])"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _oldWearables?: null,
      _newWearables?: null
    ): EquipWearablesEventFilter;
    EquipWearables(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _oldWearables?: null,
      _newWearables?: null
    ): EquipWearablesEventFilter;

    "TransferToParent(address,uint256,uint256,uint256)"(
      _toContract?: PromiseOrValue<string> | null,
      _toTokenId?: PromiseOrValue<BigNumberish> | null,
      _tokenTypeId?: PromiseOrValue<BigNumberish> | null,
      _value?: null
    ): TransferToParentEventFilter;
    TransferToParent(
      _toContract?: PromiseOrValue<string> | null,
      _toTokenId?: PromiseOrValue<BigNumberish> | null,
      _tokenTypeId?: PromiseOrValue<BigNumberish> | null,
      _value?: null
    ): TransferToParentEventFilter;

    "UseConsumables(uint256,uint256[],uint256[])"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _itemIds?: null,
      _quantities?: null
    ): UseConsumablesEventFilter;
    UseConsumables(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _itemIds?: null,
      _quantities?: null
    ): UseConsumablesEventFilter;
  };

  estimateGas: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfToken(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equipWearables(
      _tokenId: PromiseOrValue<BigNumberish>,
      _wearablesToEquip: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    equippedWearables(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findWearableSets(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemType(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemTypes(
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableSet(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    itemBalances(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemBalancesOfToken(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemBalancesOfTokenWithTypes(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemBalancesWithTypes(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBaseURI(
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalWearableSets(overrides?: CallOverrides): Promise<BigNumber>;

    uri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    useConsumables(
      _tokenId: PromiseOrValue<BigNumberish>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _owner: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      _owners: PromiseOrValue<string>[],
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfToken(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    equipWearables(
      _tokenId: PromiseOrValue<BigNumberish>,
      _wearablesToEquip: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    equippedWearables(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findWearableSets(
      _wearableIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemType(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemTypes(
      _itemIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableSet(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWearableSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemBalances(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemBalancesOfToken(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemBalancesOfTokenWithTypes(
      _tokenContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemBalancesWithTypes(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalWearableSets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uri(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    useConsumables(
      _tokenId: PromiseOrValue<BigNumberish>,
      _itemIds: PromiseOrValue<BigNumberish>[],
      _quantities: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
