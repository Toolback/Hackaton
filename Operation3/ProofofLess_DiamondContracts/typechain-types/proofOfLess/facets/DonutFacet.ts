/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type ItemTypeStruct = {
  name: PromiseOrValue<string>;
  description: PromiseOrValue<string>;
  author: PromiseOrValue<string>;
  traitModifiers: PromiseOrValue<BigNumberish>[];
  slotPositions: PromiseOrValue<boolean>[];
  lessPrice: PromiseOrValue<BigNumberish>;
  stablePrice: PromiseOrValue<BigNumberish>;
  maxQuantity: PromiseOrValue<BigNumberish>;
  totalQuantity: PromiseOrValue<BigNumberish>;
  canPurchaseWithLess: PromiseOrValue<boolean>;
  canPurchaseWithCoins: PromiseOrValue<boolean>;
  minLevel: PromiseOrValue<BigNumberish>;
  canBeTransferred: PromiseOrValue<boolean>;
  category: PromiseOrValue<BigNumberish>;
  experienceBonus: PromiseOrValue<BigNumberish>;
};

export type ItemTypeStructOutput = [
  string,
  string,
  string,
  number[],
  boolean[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  number,
  boolean,
  number,
  number
] & {
  name: string;
  description: string;
  author: string;
  traitModifiers: number[];
  slotPositions: boolean[];
  lessPrice: BigNumber;
  stablePrice: BigNumber;
  maxQuantity: BigNumber;
  totalQuantity: BigNumber;
  canPurchaseWithLess: boolean;
  canPurchaseWithCoins: boolean;
  minLevel: number;
  canBeTransferred: boolean;
  category: number;
  experienceBonus: number;
};

export type ItemTypeIOStruct = {
  balance: PromiseOrValue<BigNumberish>;
  itemId: PromiseOrValue<BigNumberish>;
  itemType: ItemTypeStruct;
};

export type ItemTypeIOStructOutput = [
  BigNumber,
  BigNumber,
  ItemTypeStructOutput
] & { balance: BigNumber; itemId: BigNumber; itemType: ItemTypeStructOutput };

export type DonutInfoDetailedStruct = {
  userAddress: PromiseOrValue<string>;
  userName: PromiseOrValue<string>;
  userBio: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  cycleId: PromiseOrValue<BigNumberish>;
  level: PromiseOrValue<BigNumberish>;
  rank: PromiseOrValue<BigNumberish>;
  toNextLevel: PromiseOrValue<BigNumberish>;
  experience: PromiseOrValue<BigNumberish>;
  minimumStake: PromiseOrValue<BigNumberish>;
  stakedAmount: PromiseOrValue<BigNumberish>;
  usedSkillPoints: PromiseOrValue<BigNumberish>;
  claimTime: PromiseOrValue<BigNumberish>;
  questAccepted: PromiseOrValue<BigNumberish>;
  questCompleted: PromiseOrValue<BigNumberish>;
  daoProposalCreated: PromiseOrValue<BigNumberish>;
  daoProposalCreatedAccepted: PromiseOrValue<BigNumberish>;
  daoProposalVoted: PromiseOrValue<BigNumberish>;
  challengeReceived: PromiseOrValue<BigNumberish>;
  friendChallenged: PromiseOrValue<BigNumberish>;
  equippedWearables: PromiseOrValue<BigNumberish>[];
  temporaryTraitBoosts: PromiseOrValue<BigNumberish>[];
  interactionCount: PromiseOrValue<BigNumberish>;
  lastInteracted: PromiseOrValue<BigNumberish>;
  isActive: PromiseOrValue<boolean>;
  items: ItemTypeIOStruct[];
};

export type DonutInfoDetailedStructOutput = [
  string,
  string,
  string,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number[],
  number[],
  BigNumber,
  number,
  boolean,
  ItemTypeIOStructOutput[]
] & {
  userAddress: string;
  userName: string;
  userBio: string;
  tokenId: number;
  cycleId: number;
  level: BigNumber;
  rank: BigNumber;
  toNextLevel: BigNumber;
  experience: BigNumber;
  minimumStake: BigNumber;
  stakedAmount: BigNumber;
  usedSkillPoints: BigNumber;
  claimTime: number;
  questAccepted: BigNumber;
  questCompleted: BigNumber;
  daoProposalCreated: BigNumber;
  daoProposalCreatedAccepted: BigNumber;
  daoProposalVoted: BigNumber;
  challengeReceived: BigNumber;
  friendChallenged: BigNumber;
  equippedWearables: number[];
  temporaryTraitBoosts: number[];
  interactionCount: BigNumber;
  lastInteracted: number;
  isActive: boolean;
  items: ItemTypeIOStructOutput[];
};

export interface DonutFacetInterface extends utils.Interface {
  functions: {
    "addInterfaces()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "availableSkillPoints(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchOwnerOf(uint256[])": FunctionFragment;
    "donutClaimTime(uint256)": FunctionFragment;
    "donutLevel(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getDonutInfos(uint256)": FunctionFragment;
    "getNumericTraits(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isDonutNameTaken(string)": FunctionFragment;
    "modifiedTraitsAndRarityScore(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "retrieveMemberDonutId(address)": FunctionFragment;
    "setApprovalForAll(address,bool,uint256)": FunctionFragment;
    "setDonutBio(uint256,string)": FunctionFragment;
    "setDonutName(uint256,string)": FunctionFragment;
    "spendSkillPoints(uint256,int16[4])": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "xpUntilNextLevel(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addInterfaces"
      | "approve"
      | "availableSkillPoints"
      | "balanceOf"
      | "batchOwnerOf"
      | "donutClaimTime"
      | "donutLevel"
      | "getApproved"
      | "getDonutInfos"
      | "getNumericTraits"
      | "isApprovedForAll"
      | "isDonutNameTaken"
      | "modifiedTraitsAndRarityScore"
      | "name"
      | "ownerOf"
      | "retrieveMemberDonutId"
      | "setApprovalForAll"
      | "setDonutBio"
      | "setDonutName"
      | "spendSkillPoints"
      | "symbol"
      | "tokenByIndex"
      | "tokenURI"
      | "totalSupply"
      | "xpUntilNextLevel"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableSkillPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchOwnerOf",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "donutClaimTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "donutLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonutInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumericTraits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDonutNameTaken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifiedTraitsAndRarityScore",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveMemberDonutId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonutBio",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDonutName",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spendSkillPoints",
    values: [
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xpUntilNextLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableSkillPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchOwnerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donutClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donutLevel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonutInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumericTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDonutNameTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifiedTraitsAndRarityScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveMemberDonutId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonutBio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonutName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendSkillPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xpUntilNextLevel",
    data: BytesLike
  ): Result;

  events: {
    "SetDonutName(uint256,string,string)": EventFragment;
    "SpendSkillpoints(uint256,int16[4])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetDonutName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpendSkillpoints"): EventFragment;
}

export interface SetDonutNameEventObject {
  _tokenId: BigNumber;
  _oldName: string;
  _newName: string;
}
export type SetDonutNameEvent = TypedEvent<
  [BigNumber, string, string],
  SetDonutNameEventObject
>;

export type SetDonutNameEventFilter = TypedEventFilter<SetDonutNameEvent>;

export interface SpendSkillpointsEventObject {
  _tokenId: BigNumber;
  _values: [number, number, number, number];
}
export type SpendSkillpointsEvent = TypedEvent<
  [BigNumber, [number, number, number, number]],
  SpendSkillpointsEventObject
>;

export type SpendSkillpointsEventFilter =
  TypedEventFilter<SpendSkillpointsEvent>;

export interface DonutFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DonutFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addInterfaces(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance_: BigNumber }>;

    batchOwnerOf(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { owners_: string[] }>;

    donutClaimTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimTime_: BigNumber }>;

    donutLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { level_: BigNumber }>;

    getApproved(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { approved_: string }>;

    getDonutInfos(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [DonutInfoDetailedStructOutput] & {
        donutInfos_: DonutInfoDetailedStructOutput;
      }
    >;

    getNumericTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { numericTraits_: number[] }>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { approved_: boolean }>;

    isDonutNameTaken(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { available_: boolean }>;

    modifiedTraitsAndRarityScore(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber] & {
        numericTraits_: number[];
        rarityScore_: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner_: string }>;

    retrieveMemberDonutId(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDonutBio(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newBio: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDonutName(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spendSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokenId_: BigNumber }>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply_: BigNumber }>;

    xpUntilNextLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { requiredXp_: BigNumber }>;
  };

  addInterfaces(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    _approved: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableSkillPoints(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchOwnerOf(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  donutClaimTime(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  donutLevel(
    _experience: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDonutInfos(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DonutInfoDetailedStructOutput>;

  getNumericTraits(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  isApprovedForAll(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDonutNameTaken(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  modifiedTraitsAndRarityScore(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number[], BigNumber] & {
      numericTraits_: number[];
      rarityScore_: BigNumber;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  retrieveMemberDonutId(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setApprovalForAll(
    _operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDonutBio(
    _tokenId: PromiseOrValue<BigNumberish>,
    _newBio: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDonutName(
    _tokenId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spendSkillPoints(
    _tokenId: PromiseOrValue<BigNumberish>,
    _values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  xpUntilNextLevel(
    _experience: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addInterfaces(overrides?: CallOverrides): Promise<void>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    availableSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchOwnerOf(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    donutClaimTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donutLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDonutInfos(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DonutInfoDetailedStructOutput>;

    getNumericTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDonutNameTaken(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modifiedTraitsAndRarityScore(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber] & {
        numericTraits_: number[];
        rarityScore_: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    retrieveMemberDonutId(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDonutBio(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newBio: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setDonutName(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    spendSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    xpUntilNextLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "SetDonutName(uint256,string,string)"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _oldName?: null,
      _newName?: null
    ): SetDonutNameEventFilter;
    SetDonutName(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _oldName?: null,
      _newName?: null
    ): SetDonutNameEventFilter;

    "SpendSkillpoints(uint256,int16[4])"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _values?: null
    ): SpendSkillpointsEventFilter;
    SpendSkillpoints(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _values?: null
    ): SpendSkillpointsEventFilter;
  };

  estimateGas: {
    addInterfaces(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchOwnerOf(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donutClaimTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donutLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDonutInfos(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumericTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDonutNameTaken(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifiedTraitsAndRarityScore(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieveMemberDonutId(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDonutBio(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newBio: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDonutName(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spendSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    xpUntilNextLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addInterfaces(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchOwnerOf(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donutClaimTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donutLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDonutInfos(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumericTraits(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDonutNameTaken(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifiedTraitsAndRarityScore(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieveMemberDonutId(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDonutBio(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newBio: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDonutName(
      _tokenId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spendSkillPoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xpUntilNextLevel(
      _experience: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
