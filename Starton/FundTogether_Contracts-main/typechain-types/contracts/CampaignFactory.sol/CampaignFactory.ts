/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CampaignFactoryInterface extends utils.Interface {
  functions: {
    "accessCardContract()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "admins(address)": FunctionFragment;
    "bal(address)": FunctionFragment;
    "campaignAdmin()": FunctionFragment;
    "campaignPrice()": FunctionFragment;
    "createCampaign(uint256,address)": FunctionFragment;
    "deleteAdmin(address)": FunctionFragment;
    "deleteCampaign(uint256)": FunctionFragment;
    "deployedCampaigns(uint256)": FunctionFragment;
    "getDeployedCampaigns()": FunctionFragment;
    "payingToken()": FunctionFragment;
    "setCampaignPrice(uint256)": FunctionFragment;
    "setPayingToken(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accessCardContract"
      | "addAdmin"
      | "admins"
      | "bal"
      | "campaignAdmin"
      | "campaignPrice"
      | "createCampaign"
      | "deleteAdmin"
      | "deleteCampaign"
      | "deployedCampaigns"
      | "getDeployedCampaigns"
      | "payingToken"
      | "setCampaignPrice"
      | "setPayingToken"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accessCardContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCampaign",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedCampaigns",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayingToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessCardContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "campaignAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPayingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface CampaignFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CampaignFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accessCardContract(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    campaignAdmin(overrides?: CallOverrides): Promise<[string]>;

    campaignPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    createCampaign(
      _minimum: PromiseOrValue<BigNumberish>,
      _supportedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteAdmin(
      _oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployedCampaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDeployedCampaigns(overrides?: CallOverrides): Promise<[string[]]>;

    payingToken(overrides?: CallOverrides): Promise<[string]>;

    setCampaignPrice(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPayingToken(
      _newPayingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accessCardContract(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    _newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admins(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bal(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  campaignAdmin(overrides?: CallOverrides): Promise<string>;

  campaignPrice(overrides?: CallOverrides): Promise<BigNumber>;

  createCampaign(
    _minimum: PromiseOrValue<BigNumberish>,
    _supportedToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteAdmin(
    _oldAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteCampaign(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployedCampaigns(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDeployedCampaigns(overrides?: CallOverrides): Promise<string[]>;

  payingToken(overrides?: CallOverrides): Promise<string>;

  setCampaignPrice(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPayingToken(
    _newPayingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenAddr: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accessCardContract(overrides?: CallOverrides): Promise<string>;

    addAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignAdmin(overrides?: CallOverrides): Promise<string>;

    campaignPrice(overrides?: CallOverrides): Promise<BigNumber>;

    createCampaign(
      _minimum: PromiseOrValue<BigNumberish>,
      _supportedToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deleteAdmin(
      _oldAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployedCampaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDeployedCampaigns(overrides?: CallOverrides): Promise<string[]>;

    payingToken(overrides?: CallOverrides): Promise<string>;

    setCampaignPrice(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPayingToken(
      _newPayingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accessCardContract(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    campaignPrice(overrides?: CallOverrides): Promise<BigNumber>;

    createCampaign(
      _minimum: PromiseOrValue<BigNumberish>,
      _supportedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteAdmin(
      _oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployedCampaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployedCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    payingToken(overrides?: CallOverrides): Promise<BigNumber>;

    setCampaignPrice(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPayingToken(
      _newPayingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessCardContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bal(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCampaign(
      _minimum: PromiseOrValue<BigNumberish>,
      _supportedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteAdmin(
      _oldAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteCampaign(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployedCampaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployedCampaigns(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCampaignPrice(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPayingToken(
      _newPayingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAddr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
